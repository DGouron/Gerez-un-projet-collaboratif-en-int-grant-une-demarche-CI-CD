name: 🔍 Backend PR Validation

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'pom.xml'
      - 'Dockerfile'
      - '.github/workflows/**'
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'pom.xml'
      - 'Dockerfile'
      - '.github/workflows/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Dmaven.repo.local=.m2/repository -Xmx1024m -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true'

jobs:
  quality-checks:
    name: 🧪 Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: .m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: 🔍 Validate Maven Configuration
        run: ./mvnw validate

      - name: 🏗️ Compile Application
        run: ./mvnw clean compile -DskipTests

      - name: 🧪 Run Unit Tests
        run: ./mvnw test

      - name: 📊 Generate Test Reports
        run: ./mvnw jacoco:report

      - name: 📈 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./target/site/jacoco/jacoco.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: 📋 Coverage Comment
        uses: madrapps/jacoco-report@v1.6.1
        if: github.event_name == 'pull_request'
        with:
          paths: ${{ github.workspace }}/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          title: 📊 Backend Coverage Report
          update-comment: true

      - name: 🔎 SonarQube Analysis
        if: github.event_name == 'pull_request' && github.repository_owner != 'dependabot[bot]'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ ! -z "$SONAR_TOKEN" ]; then
            ./mvnw sonar:sonar \
              -Dsonar.projectKey=bobapp-backend \
              -Dsonar.host.url=${{ secrets.SONAR_HOST_URL || 'https://sonarcloud.io' }} \
              -Dsonar.login=$SONAR_TOKEN \
              -Dsonar.pullrequest.key=${{ github.event.number }} \
              -Dsonar.pullrequest.branch=${{ github.head_ref }} \
              -Dsonar.pullrequest.base=${{ github.base_ref }}
          else
            echo "⚠️ SonarQube skipped: SONAR_TOKEN not configured"
          fi

  build-check:
    name: 🏗️ Build & Package Check
    runs-on: ubuntu-latest
    needs: quality-checks
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: .m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: 🏗️ Package Application
        run: ./mvnw clean package -DskipTests

      - name: 📦 Upload JAR Artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-jar
          path: target/*.jar
          retention-days: 1

      - name: 🐳 Build Docker Image
        run: |
          docker build -t bobapp-backend:test .
          docker images | grep bobapp-backend

      - name: 🔍 Test Docker Image
        run: |
          # Start container in background
          docker run -d --name test-backend -p 8080:8080 bobapp-backend:test
          
          # Wait for application to start
          timeout 60s bash -c 'until curl -f http://localhost:8080/actuator/health 2>/dev/null; do sleep 2; done' || \
          timeout 60s bash -c 'until curl -f http://localhost:8080/api/joke 2>/dev/null; do sleep 2; done'
          
          # Cleanup
          docker stop test-backend
          docker rm test-backend

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality-checks
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: 🔍 OWASP Dependency Check
        run: |
          ./mvnw org.owasp:dependency-check-maven:check \
            -DfailBuildOnCVSS=8 \
            -DsuppressedVulnerabilitiesFile=.github/owasp-suppressions.xml || true

      - name: 📋 Upload Security Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: owasp-report
          path: target/dependency-check-report.html
          retention-days: 7

  pr-status:
    name: ✅ PR Status
    runs-on: ubuntu-latest
    needs: [quality-checks, build-check, security-scan]
    if: always()
    
    steps:
      - name: 🎉 All Checks Passed
        if: needs.quality-checks.result == 'success' && needs.build-check.result == 'success' && needs.security-scan.result == 'success'
        run: |
          echo "✅ All backend quality checks passed!"
          echo "🚀 PR is ready to be merged"

      - name: ⚠️ Some Checks Failed
        if: needs.quality-checks.result != 'success' || needs.build-check.result != 'success' || needs.security-scan.result != 'success'
        run: |
          echo "❌ Some backend quality checks failed!"
          echo "🔧 Please fix the issues before merging"
          echo "Quality: ${{ needs.quality-checks.result }}"
          echo "Build: ${{ needs.build-check.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          exit 1 