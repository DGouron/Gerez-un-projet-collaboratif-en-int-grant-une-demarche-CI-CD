name: 🔍 PR Validation

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  changes:
    name: 🔄 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🔍 Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'front/**'
            backend:
              - 'back/**'
            docs:
              - 'documents/**'
              - '*.md'

  frontend-quality:
    name: 🎨 Frontend Quality Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    defaults:
      run:
        working-directory: ./front
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: front/package-lock.json
          
      - name: 📋 Install dependencies
        run: npm ci
        
      - name: 🔍 Lint check
        run: |
          if [ -f "biome.json" ]; then
            npx @biomejs/biome check src/
          else
            echo "⚠️ Biome not configured yet"
          fi
        
      - name: 🧪 Run tests
        run: npm run test:ci || npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
        
      - name: 🏗️ Build check
        run: npm run build:prod || npm run build -- --configuration=production
        
      - name: 📊 Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage
          path: front/coverage/
          
      - name: 🔍 SonarQube Frontend Analysis
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: front
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  backend-quality:
    name: ☕ Backend Quality Check  
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    timeout-minutes: 20
    defaults:
      run:
        working-directory: ./back
        
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: back/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('back/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
          
      - name: 🔍 Validate Maven Configuration
        run: ./mvnw validate
        
      - name: 🔧 Compile
        run: ./mvnw clean compile -DskipTests
        
      - name: 🧪 Run tests
        run: ./mvnw test
        
      - name: 📊 Generate Test Reports
        run: ./mvnw jacoco:report
        
      - name: 🔍 Check Test Reports
        run: |
          echo "Checking for test report files..."
          ls -la target/surefire-reports/ || echo "No surefire-reports directory found"
          find target/ -name "*.xml" -type f | head -10 || echo "No XML files found in target"
        
      - name: 📋 Backend Test Report
        uses: dorny/test-reporter@v1
        if: always() && hashFiles('back/target/surefire-reports/*.xml') != ''
        with:
          name: Backend Tests
          path: back/target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: false
          
      - name: 📋 Fallback Test Summary
        if: always() && hashFiles('back/target/surefire-reports/*.xml') == ''
        run: |
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "No JUnit XML reports found. Tests may have failed to run or reports weren't generated." >> $GITHUB_STEP_SUMMARY
          echo "Check the test execution logs above for details." >> $GITHUB_STEP_SUMMARY

      - name: 📈 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./back/target/site/jacoco/jacoco.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: 📋 Coverage Comment
        uses: madrapps/jacoco-report@v1.6.1
        if: github.event_name == 'pull_request'
        with:
          paths: ${{ github.workspace }}/back/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          title: 📊 Backend Coverage Report
          update-comment: true

      - name: 🔎 SonarQube Analysis
        if: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ ! -z "$SONAR_TOKEN" ]; then
            echo "🔍 Running SonarQube analysis..."
            ./mvnw sonar:sonar \
              -Dsonar.projectKey=DGouron_Gerez-un-projet-collaboratif-en-int-grant-une-demarche-CI-CD \
              -Dsonar.host.url=${{ secrets.SONAR_HOST_URL || 'https://sonarcloud.io' }} \
              -Dsonar.login=$SONAR_TOKEN \
              -Dsonar.pullrequest.key=${{ github.event.number }} \
              -Dsonar.pullrequest.branch=${{ github.head_ref }} \
              -Dsonar.pullrequest.base=${{ github.base_ref }}
          else
            echo "⚠️ SonarQube skipped: SONAR_TOKEN not configured"
          fi
        
      - name: 📦 Package
        run: ./mvnw package -DskipTests

  backend-build:
    name: 🏗️ Backend Build & Docker
    runs-on: ubuntu-latest
    needs: backend-quality
    if: needs.changes.outputs.backend == 'true'
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./back
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: back/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('back/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: 🏗️ Package Application
        run: ./mvnw clean package -DskipTests

      - name: 📦 Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: back/target/*.jar
          retention-days: 1

      - name: 🐳 Build Docker Image
        run: |
          docker build -t bobapp-backend:test .
          docker images | grep bobapp-backend

      - name: 🔍 Test Docker Image
        run: |
          # Start container in background
          docker run -d --name test-backend -p 8080:8080 bobapp-backend:test
          
          # Wait for application to start
          timeout 60s bash -c 'until curl -f http://localhost:8080/actuator/health 2>/dev/null; do sleep 2; done' || \
          timeout 60s bash -c 'until curl -f http://localhost:8080/api/joke 2>/dev/null; do sleep 2; done'
          
          # Cleanup
          docker stop test-backend
          docker rm test-backend

  backend-security:
    name: 🔒 Backend Security Scan
    runs-on: ubuntu-latest
    needs: backend-quality
    if: needs.changes.outputs.backend == 'true'
    timeout-minutes: 20
    defaults:
      run:
        working-directory: ./back
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: back/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('back/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: 📦 Cache OWASP Database
        uses: actions/cache@v3
        with:
          path: back/target/dependency-check-data
          key: ${{ runner.os }}-owasp-db-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-owasp-db-

      - name: 🔍 OWASP Dependency Check
        run: |
          ./mvnw dependency-check:check || true
        env:
          MAVEN_OPTS: "-Xmx2048m"

      - name: 📋 Upload Security Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-report
          path: back/target/dependency-check-report.html
          retention-days: 7

  docs-validation:
    name: 📚 Documentation Validation
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docs == 'true'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🔍 Validate Markdown
        run: |
          npm install -g markdownlint-cli
          markdownlint documents/**/*.md README.md --ignore node_modules || echo "⚠️ Markdown linting issues found"
          
      - name: 🧪 Test Mermaid diagrams
        run: |
          echo "Checking for Mermaid diagrams..."
          find documents/ -name "*.md" -exec grep -l "mermaid" {} \; || echo "No Mermaid diagrams found"
          echo "✅ Mermaid syntax validation completed"

  pr-summary:
    name: 📋 PR Summary
    runs-on: ubuntu-latest
    needs: [changes, frontend-quality, backend-quality, backend-build, backend-security, docs-validation]
    if: always()
    
    steps:
      - name: 📊 Generate summary
        run: |
          echo "## 🔍 PR Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changes detected:" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ needs.changes.outputs.frontend }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: ${{ needs.changes.outputs.backend }}" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation: ${{ needs.changes.outputs.docs }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quality checks:" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ needs.frontend-quality.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Quality: ${{ needs.backend-quality.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Build: ${{ needs.backend-build.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Security: ${{ needs.backend-security.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation: ${{ needs.docs-validation.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY 